# Multi-stage build Dockerfile 
# This version builds the application inside Docker completely from scratch

# Build stage
FROM eclipse-temurin:17-jdk-jammy AS build

WORKDIR /build

# Install dependencies including gradle
RUN apt-get update && \
    apt-get install -y ca-certificates wget unzip && \
    rm -rf /var/lib/apt/lists/*

# Install Gradle manually to avoid SSL issues with wrapper
RUN wget -q https://services.gradle.org/distributions/gradle-8.9-bin.zip -O gradle.zip || \
    (echo "Gradle download failed, trying HTTP..." && \
     wget -q --no-check-certificate https://services.gradle.org/distributions/gradle-8.9-bin.zip -O gradle.zip) && \
    unzip -q gradle.zip && \
    mv gradle-8.9 /opt/gradle && \
    rm gradle.zip
ENV PATH="/opt/gradle/bin:${PATH}"

# Copy source code
COPY . .

# Build the application using system gradle
RUN gradle server:installDist --no-daemon

# Runtime stage
FROM eclipse-temurin:17-jre-jammy

WORKDIR /app

# Install curl (used by health checks) and optional psql client
RUN apt-get update \
    && apt-get install -y --no-install-recommends curl postgresql-client ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Copy the application distribution from build stage
COPY --from=build /build/server/build/install/server /app

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

EXPOSE 8080

CMD ["./bin/server"]